// DO NOT EDIT! This file is generated by BuildIt.ninja form generator.
// Please edit /form/forms.yml & then rebuild EventBucket.
package main

import (
	"time"

	"github.com/speedyhoon/frm"
	"github.com/speedyhoon/vl"
)

const (
	frmClubNew uint8 = iota
	frmClubEdit
	frmClubMoundNew
	frmEditShootingMound
	frmMapClubs
	frmEventNew
	frmEventEdit
	frmEventRangeNew
	frmEventRangeEdit
	frmEventAggNew
	frmEventAggEdit
	frmEventShooterNew
	frmEntriesEditShooterDetails
	frmEventShooterExisting
	frmEventTotalScores
	frmEventAvailableGrades
	frmEventUpdateShotScore
	frmShooterNew
	frmShooterDetails
	frmShooterUpdate
	frmShooterSearch
	frmShootersImport
	frmSettings
)

func init() {
	post("/0", frmClubNew, clubInsert)
	post("/1", frmClubEdit, clubDetailsUpsert)
	post("/2", frmClubMoundNew, clubMoundInsert)
	post("/3", frmEditShootingMound, clubMoundUpsert)
	get("/4", frmMapClubs, clubsMap)
	post("/5", frmEventNew, eventInsert)
	post("/6", frmEventEdit, eventDetailsUpsert)
	post("/7", frmEventRangeNew, eventRangeInsert)
	post("/8", frmEventRangeEdit, eventRangeUpdate)
	post("/9", frmEventAggNew, eventAggInsert)
	post("/10", frmEventAggEdit, eventAggUpdate)
	post("/11", frmEventShooterNew, eventShooterInsert)
	post("/12", frmEntriesEditShooterDetails, eventShooterUpdate)
	post("/13", frmEventShooterExisting, eventShooterExistingInsert)
	post("/15", frmEventAvailableGrades, eventAvailableGradesUpsert)
	post("/17", frmShooterNew, shooterInsert)
	post("/18", frmShooterDetails, shooterInsert)
	post("/19", frmShooterUpdate, shooterUpdate)
	get(urlShooters, frmShooterSearch, shooters)
	post("/22", frmSettings, settingsUpdate)

	/* TODO instead of calling the database every page load -- HTML <datalist> for clubsDataList AND searchShootersOptions
	should be generated during database inserts/updates and statically inserted */

	/* TODO vl validation -- add Int & Uint bit maximum size to limits (auto-calculated if Max field is present)
	so if the conversion using strconv is out of bounds it can fail early. */

	frm.GetFields = func(id uint8) []frm.Field {
		switch id {
		case frmClubNew:
			return []frm.Field{
				// TODO automatically generate comments to label each field so you know which one is which easily.
				{Name: "n", V8: vl.StrReq},
			}
		case frmClubEdit:
			return []frm.Field{
				{Name: "n", V8: vl.StrReq},
				{Name: "a", V8: vl.Str},
				{Name: "w", V8: vl.Str},
				{Name: "p", V8: vl.Str},
				{Name: "x", V8: vl.Float64, Min: -90, Max: 90, Step: 1e-06},
				{Name: "y", V8: vl.Float64, Min: -180, Max: 180, Step: 1e-06},
				{Name: "b", V8: vl.Bool},
				{Name: "u", V8: vl.Str},
				{Name: "C", V8: vl.Regex, Regex: regexID},
			}
		case frmClubMoundNew:
			return []frm.Field{
				{Name: "n", V8: vl.StrReq},
				{Name: "C", V8: vl.Regex, Regex: regexID},
			}
		case frmEditShootingMound:
			return []frm.Field{
				{Name: "n", V8: vl.StrReq},
				// TODO replace with Uint16 if the maximum is math.MaxUint16.
				{Name: "I", V8: vl.Uint, Max: 65535},
				{Name: "C", V8: vl.Regex, Regex: regexID},
			}
		case frmMapClubs:
			return []frm.Field{
				{Name: "C", V8: vl.Regex, Regex: regexID},
			}
		case frmEventNew:
			club := defaultClub()
			return []frm.Field{
				{Name: "C", V8: vl.Str, Value: club.Name, Required: club.IsDefault, MinLen: 1, Options: clubsDataList()},
				{Name: "n", V8: vl.StrReq},
				{Name: "d", V8: vl.DateTime, Value: time.Now().Format(dateTime), Placeholder: dateTime, MaxLen: 16, MinLen: 14},
			}
		case frmEventEdit:
			return []frm.Field{
				{Name: "C", V8: vl.StrReq, Options: clubsDataList()},
				{Name: "n", V8: vl.StrReq},
				{Name: "d", V8: vl.DateTime, Placeholder: dateTime, MaxLen: 16, MinLen: 14},
				{Name: "c", V8: vl.Bool},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEventRangeNew:
			return []frm.Field{
				{Name: "n", V8: vl.StrReq},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEventRangeEdit:
			return []frm.Field{
				// TODO fix fake maximum uint id limit.
				{Name: "I", V8: vl.UintReq, Min: 1, Max: 65535},
				{Name: "n", V8: vl.StrReq},
				{Name: "k", V8: vl.Bool},
				// TODO fix fake maximum uint id limit.
				{Name: "o", V8: vl.UintReq, Max: 65535},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEventAggNew:
			return []frm.Field{
				{Name: "n", V8: vl.StrReq},
				// TODO fix fake maximum uint id limit.
				{Name: "R", V8: vl.UintList, Required: true, MaxLen: 5, MinLen: 2, Min: 1, Max: 65535},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEventAggEdit:
			return []frm.Field{
				{Name: "E", V8: vl.Regex, Regex: regexID},
				// TODO fix fake maximum uint id limit.
				{Name: "I", V8: vl.UintReq, Min: 1, Max: 65535},
				{Name: "n", V8: vl.StrReq},
				// TODO fix fake maximum uint id limit.
				{Name: "R", V8: vl.UintList, Required: true, MinLen: 2, Min: 1, Max: 65535},
				// TODO fix fake maximum uint id limit.
				{Name: "o", V8: vl.UintReq, Max: 65535},
			}
		case frmEventShooterNew:
			clubName := defaultClub().Name
			return []frm.Field{
				{Name: "f", V8: vl.StrReq},
				{Name: "s", V8: vl.StrReq},
				// TODO replace database call with datalist template insertion.
				{Name: "C", V8: vl.Str, Placeholder: clubName, Options: clubsDataList()},
				// TODO replace database call with datalist template insertion.
				{Name: "S", V8: vl.Str, Options: searchShootersOptions("", "", clubName)},
				{Name: "r", V8: vl.UintOpt, Options: dataListAgeGroup()},
				{Name: "x", V8: vl.Bool},
				{Name: "g", V8: vl.UintList, Required: true, Max: len(globalGrades) - 1, Options: globalGradesDataList},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEntriesEditShooterDetails:
			return []frm.Field{
				// TODO fix fake maximum uint id limit.
				{Name: "S", V8: vl.UintReq, Max: 65535},
				{Name: "E", V8: vl.RegexReq, Regex: regexID},
				{Name: "f", V8: vl.StrReq},
				{Name: "s", V8: vl.StrReq},
				{Name: "C", V8: vl.Regex, Regex: regexID},
				{Name: "g", V8: vl.UintReq, Max: len(globalGrades) - 1, Options: globalGradesDataList},
				{Name: "r", V8: vl.UintOpt, Options: dataListAgeGroup()},
				{Name: "x", V8: vl.Bool},
				{Name: "k", V8: vl.Bool},
			}
		case frmEventShooterExisting:
			return []frm.Field{
				{Name: "S", V8: vl.RegexReq, Regex: regexID},
				{Name: "g", V8: vl.UintList, Required: true, Max: len(globalGrades) - 1, Options: globalGradesDataList},
				{Name: "r", V8: vl.UintOpt, Options: dataListAgeGroup()},
				{Name: "E", V8: vl.RegexReq, Regex: regexID},
			}
		case frmEventTotalScores:
			return []frm.Field{
				{Name: "t", V8: vl.UintReq, Max: 120},
				{Name: "c", V8: vl.Uint, Max: 20},
				{Name: "E", V8: vl.RegexReq, Regex: regexID},
				// TODO fix fake maximum uint id limit.
				{Name: "R", V8: vl.UintReq, Min: 1, Max: 65535},
				// TODO fix fake maximum uint id limit.
				{Name: "S", V8: vl.UintReq, Max: 65535},
				{Name: "h", V8: vl.Uint, Max: 100},
			}
		case frmEventAvailableGrades:
			return []frm.Field{
				// TODO replace availableGrades() with datalist template insertion.
				{Name: "g", V8: vl.UintList, Required: true, Max: len(globalGrades) - 1, Options: availableGrades([]uint{})},
				{Name: "E", V8: vl.Regex, Regex: regexID},
			}
		case frmEventUpdateShotScore:
			return []frm.Field{
				{Name: "s", V8: vl.StrReq, MaxLen: 12},
				{Name: "E", V8: vl.RegexReq, Regex: regexID},
				// TODO fix fake maximum uint id limit.
				{Name: "R", V8: vl.UintReq, Min: 1, Max: 65535},
				// TODO fix fake maximum uint id limit.
				{Name: "S", V8: vl.UintReq, Max: 65535},
			}
		case frmShooterNew:
			club := defaultClub()
			return []frm.Field{
				{Name: "f", V8: vl.StrReq},
				{Name: "s", V8: vl.StrReq},
				// TODO replace database call with datalist template insertion.
				{Name: "C", V8: vl.Str, Placeholder: club.Name, Required: club.IsDefault, MinLen: 1, Options: clubsDataList()},
				{Name: "r", V8: vl.UintOpt, Options: dataListAgeGroup()},
				{Name: "x", V8: vl.Bool},
				{Name: "g", V8: vl.UintList, Required: true, Max: len(globalGrades) - 1, Options: globalGradesDataList},
			}
		case frmShooterDetails:
			return []frm.Field{
				{Name: "f", V8: vl.StrReq},
				{Name: "s", V8: vl.StrReq},
				{Name: "C", V8: vl.StrReq},
				{Name: "g", V8: vl.UintList, Required: true, Max: len(globalGrades) - 1, Options: globalGradesDataList},
				{Name: "r", V8: vl.UintOpt, Options: dataListAgeGroup()},
				{Name: "x", V8: vl.Bool},
				{Name: "I", V8: vl.RegexReq, Regex: regexID},
			}
		case frmShooterUpdate:
			return []frm.Field{
				{Name: "f", V8: vl.Str},
				{Name: "s", V8: vl.Str},
				{Name: "C", V8: vl.Str},
			}
		case frmShooterSearch:
			club := defaultClub()
			return []frm.Field{
				{Name: "f", V8: vl.Str},
				{Name: "s", V8: vl.Str},
				// TODO replace database call with datalist template insertion.
				{Name: "C", V8: vl.Str, Placeholder: club.Name, Required: club.IsDefault, Options: clubsDataList()},
			}
		case frmShootersImport:
			return []frm.Field{
				{Name: "f", V8: vl.FileReq},
			}
		case frmSettings:
			return []frm.Field{
				{Name: "t", V8: vl.Bool},
			}
		}
		return nil
	}
}
